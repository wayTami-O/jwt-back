import express from "express";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3000;
const JWT_SECRET = process.env.JWT_SECRET || "supersecret";

// ‚ö° –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
let users = [
  { id: 1, username: "admin", password: "1234" },
  { id: 2, username: "user", password: "pass" }
];

// üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
function generateToken(user) {
  return jwt.sign({ id: user.id, username: user.username }, JWT_SECRET, {
    expiresIn: "1h"
  });
}

// üü¢ –†–æ—É—Ç: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post("/api/register", (req, res) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ message: "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å" });
  }

  const existingUser = users.find((u) => u.username === username);
  if (existingUser) {
    return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
  }

  const newUser = { id: users.length + 1, username, password };
  users.push(newUser);

  const token = generateToken(newUser);
  res.status(201).json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", token });
});

// üü¢ –†–æ—É—Ç: –ª–æ–≥–∏–Ω
app.post("/api/login", (req, res) => {
  const { username, password } = req.body;

  const user = users.find(
    (u) => u.username === username && u.password === password
  );

  if (!user) {
    return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
  }

  const token = generateToken(user);
  res.json({ token });
});

// üõ° Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) return res.sendStatus(401);

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

// üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get("/api/protected", authenticateToken, (req, res) => {
  res.json({
    message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç!",
    user: req.user
  });
});

// üåç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≥–ª–∞–≤–Ω–∞—è)
app.get("/", (req, res) => {
  res.send("Backend —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ");
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
export default app;
