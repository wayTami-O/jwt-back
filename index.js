import express from "express";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3000;
const JWT_SECRET = process.env.JWT_SECRET || "supersecret";
const JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || "refreshsecret";

// ‚ö° –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ refresh —Ç–æ–∫–µ–Ω–æ–≤
let users = [
  { id: 1, username: "admin", password: "1234", phone: "+1000000000" },
  { id: 2, username: "user", password: "pass", phone: "+2000000000" }
];

let refreshTokens = [];

// üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Access —Ç–æ–∫–µ–Ω–∞ (–∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π)
function generateAccessToken(user) {
  return jwt.sign({ id: user.id, username: user.username }, JWT_SECRET, {
    expiresIn: "15m"
  });
}

// üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Refresh —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏–π)
function generateRefreshToken(user) {
  const token = jwt.sign(
    { id: user.id, username: user.username },
    JWT_REFRESH_SECRET,
    { expiresIn: "7d" }
  );
  refreshTokens.push(token);
  return token;
}

// üü¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post("/api/register", (req, res) => {
  const { username, password, phone } = req.body;

  if (!username || !password || !phone) {
    return res.status(400).json({ message: "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω" });
  }

  const existingUser = users.find((u) => u.username === username);
  if (existingUser) {
    return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
  }

  const newUser = { id: users.length + 1, username, password, phone };
  users.push(newUser);

  const accessToken = generateAccessToken(newUser);
  const refreshToken = generateRefreshToken(newUser);

  res.status(201).json({
    message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
    accessToken,
    refreshToken,
    user: { id: newUser.id, username, phone: newUser.phone }
  });
});

// üü¢ –õ–æ–≥–∏–Ω (—Ç—Ä–µ–±—É–µ—Ç –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
app.post("/api/login", (req, res) => {
  const { username, password, phone } = req.body;

  if (!username || !password || !phone) {
    return res.status(400).json({ message: "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω" });
  }

  const user = users.find(
    (u) =>
      u.username === username &&
      u.password === password &&
      u.phone === phone
  );

  if (!user) {
    return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞" });
  }

  const accessToken = generateAccessToken(user);
  const refreshToken = generateRefreshToken(user);

  res.json({
    accessToken,
    refreshToken,
    user: { id: user.id, username: user.username, phone: user.phone }
  });
});

// üõ° Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Access —Ç–æ–∫–µ–Ω–∞
function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) return res.sendStatus(401);

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}

// üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
app.post("/api/refresh", (req, res) => {
  const { token } = req.body;
  if (!token) return res.sendStatus(401);
  if (!refreshTokens.includes(token)) return res.sendStatus(403);

  jwt.verify(token, JWT_REFRESH_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π refresh token
    refreshTokens = refreshTokens.filter((t) => t !== token);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
    const accessToken = generateAccessToken({ id: user.id, username: user.username });
    const refreshToken = generateRefreshToken({ id: user.id, username: user.username });

    res.json({ accessToken, refreshToken });
  });
});

// üö™ Logout
app.post("/api/logout", (req, res) => {
  const { token } = req.body;
  if (!token) return res.sendStatus(400);

  refreshTokens = refreshTokens.filter((t) => t !== token);
  res.json({ message: "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã" });
});

// üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get("/api/protected", authenticateToken, (req, res) => {
  res.json({
    message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç!",
    user: req.user
  });
});

// üë• –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π)
app.get("/api/users", (req, res) => {
  const safeUsers = users.map(({ password, ...rest }) => rest);
  res.json(safeUsers);
});

// üåç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get("/", (req, res) => {
  res.send("Backend —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ");
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel
export default app;
